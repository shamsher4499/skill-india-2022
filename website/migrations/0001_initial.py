# Generated by Django 3.1.7 on 2021-06-08 07:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswerKey_pdf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans_name', models.CharField(max_length=300, null=True)),
                ('ans_img', models.ImageField(null=True, upload_to='media')),
                ('ans_pdf', models.FileField(null=True, upload_to='media')),
                ('ans_size', models.CharField(max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FooterImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, upload_to='media')),
                ('img_alt', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(max_length=254, null=True)),
                ('job_year', models.CharField(max_length=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NoticeHeading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notice_name', models.CharField(max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('not_date', models.DateField(null=True)),
                ('not_icon', models.ImageField(blank=True, null=True, upload_to='media')),
                ('not_title', models.CharField(max_length=200, null=True)),
                ('not_pdf', models.FileField(null=True, upload_to='media')),
            ],
        ),
        migrations.CreateModel(
            name='StorePassword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=100, null=True)),
                ('pass_word', models.CharField(max_length=100, null=True)),
                ('otp', models.CharField(max_length=100, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_aadhar', models.BooleanField(blank=True, default=False, null=True)),
                ('aadhar_number', models.CharField(blank=True, max_length=12, null=True)),
                ('id_type', models.IntegerField(choices=[(1, 'Driving License'), (2, 'Employer ID'), (3, 'PAN Card'), (4, 'Passport'), (5, 'School/College ID Card'), (6, 'Voter ID Card')], default=0, null=True)),
                ('id_number', models.CharField(max_length=20, null=True)),
                ('name', models.CharField(max_length=30, null=True)),
                ('change_name_type', models.BooleanField(blank=True, default=False, null=True)),
                ('change_name', models.CharField(blank=True, max_length=30, null=True)),
                ('father_name', models.CharField(max_length=30, null=True)),
                ('mother_name', models.CharField(max_length=30, null=True)),
                ('dob', models.DateField(null=True)),
                ('education_board', models.IntegerField(choices=[(1, 'Central Board of Secondary Education (CBSE)'), (2, 'Council for The Indian School Certificate Examinations (ICSE)'), (3, 'National Institute of Open Schooling (NIOS)'), (4, 'Aligarh Muslim University, Aligarh'), (5, 'Andhra Pradesh Open School Society'), (6, 'Assam Sanskrit Board'), (7, 'Banasthali Vidyapith, Rajasthan'), (8, 'Bihar Board of Open Schooling And Examination'), (9, 'Bihar Sanskrit Shiksha Board'), (10, 'Bihar School Examination Board'), (11, 'Bihar State Madrasa Education Board'), (12, 'Board of High School And Intermediate Education Uttar Pradesh'), (13, 'Board of School Education Haryana'), (14, 'Board of Secondary Education Andhra Pradesh'), (15, 'Board of Secondary Education Assam'), (16, 'Board of Secondary Education, Odisha'), (17, 'Board of Secondary Education, Rajasthan'), (18, 'Chhatisgarh State Open School'), (19, 'Chhattisgarh Board of Secondary Education'), (20, 'Chhattisgarh Sanskrit Board'), (21, 'Directorate of Army Education, New Delhi'), (22, 'Directorate of Government Examinations, Tamil Nadu'), (23, 'Goa Board of Secondary And Higher Secondary Education'), (24, 'Gujarat Secondary And Higher Secondary Education Board'), (25, 'Gurukul Kangri Vishwavidyalaya, Haridwar'), (26, 'Haryana Open School'), (27, 'Himachal Pradesh Board of School Education'), (28, 'Himachal Pradesh State Open School'), (29, 'Jamia Miliya Hamdard University'), (30, 'Jamia Miliya Islamia, New Delhi'), (31, 'Jammu and Kashmir State Board of School Education'), (32, 'Jammu and Kashmir State Open School'), (33, 'Jharkhand Academic Council Ranchi'), (34, 'Karnataka Secondary Education Examination Board'), (35, 'Kerala Board of Public Examinations'), (36, 'Madhya Pradesh Board of Secondary Education'), (37, 'Madhya Pradesh State Open School'), (38, 'Maharashtra State Board of Secondary And Higher Secondary Education'), (39, 'Manipur Board of Secondary Education'), (40, 'Meghalaya Board of School Education'), (41, 'Mizoram Board of School Education'), (42, 'Nagaland Board of School Education'), (43, 'Punjab School Education Board'), (44, 'Rajasthan State Open School'), (45, 'Rashtriya Sanskrit Sansthan, New Delhi'), (46, 'State Council for Open and Lifelong Education - Kerala'), (47, 'State Madrassa Education Board Assam'), (48, 'Tamil Nadu Board of Secondary Education'), (49, 'Tamilnadu Council for Open And Distance Learning'), (50, 'Tripura Board of Secondary Education'), (51, 'Uttarakhand Board of School Education'), (52, 'Uttrakhand Vidyalayi Shiksha Parishad'), (53, 'Uttranchal Shiksha Avam Pariksha Parishad'), (54, 'West Bengal Board of Madrasa Education'), (55, 'West Bengal Board of Secondary Education'), (56, 'The West Bengal Council of Rabindra Open Schooling'), (57, 'International Board'), (58, 'Board of Secondary Education Telangana'), (59, 'UP Board of Madrasa Education'), (60, 'Maharshi Patanjali Sanskrit Sansthan Bhopal'), (61, 'Visva Bharti University'), (62, 'Dayalbagh Education Institute'), (63, 'Gurukul Mahavidyalaya Jwalapur Haridwar'), (64, 'Uttar Pradesh Board of Secondary Sanskrit Education'), (65, 'Jharkhand Secondary Examination Board'), (66, 'Sampoornanand Sanskrit Vishwavidyalaya'), (67, 'Telangana Open School Society')], default=0, null=True)),
                ('roll_number', models.CharField(max_length=20, null=True)),
                ('passing_year', models.IntegerField(choices=[(1, '2021'), (2, '2020'), (3, '2019'), (4, '2018'), (5, '2017'), (6, '2016'), (7, '2015'), (8, '2014'), (9, '2013'), (10, '2012'), (11, '2011'), (12, '2010'), (13, '2009'), (14, '2008'), (15, '2007'), (16, '2006'), (17, '2005'), (18, '2004'), (19, '2003'), (20, '2002'), (21, '2001'), (22, '2000'), (23, '1999'), (23, '1998'), (24, '1997'), (25, '1996'), (26, '1995'), (27, '1994'), (28, '1993'), (29, '1992'), (30, '1991'), (31, '1990'), (32, '1989'), (33, '1988'), (34, '1987'), (35, '1986'), (36, '1985'), (37, '1984'), (38, '1983'), (39, '1982'), (40, '1981'), (41, '1980'), (42, '1979'), (43, '1978'), (44, '1977'), (45, '1976'), (46, '1975'), (47, '1974'), (48, '1973'), (49, '1972'), (50, '1971'), (51, '1970'), (52, '1969'), (53, '1968'), (54, '1967'), (55, '1966'), (56, '1965'), (57, '1964'), (58, '1963'), (59, '1962'), (60, '1961')], default=0, null=True)),
                ('gender', models.IntegerField(choices=[(0, 'Male'), (1, 'Female'), (2, 'Transgender')], default=0, null=True)),
                ('education_level', models.IntegerField(choices=[(1, 'Matriculation (10th)'), (2, 'Higher Secondary (10+2'), (3, 'Diploma'), (4, 'Graduation'), (5, 'Post Graduation'), (6, 'Ph.D')], default=0, null=True)),
                ('mobile_number', models.CharField(max_length=10, null=True)),
                ('email_id', models.EmailField(max_length=254, null=True)),
                ('state', models.IntegerField(choices=[(1, 'Andaman and Nicobar Islands'), (2, 'Andhra Pradesh'), (3, 'Arunachal Pradesh'), (4, 'Assam'), (5, 'Bihar'), (6, 'Chandigarh'), (7, 'Chhattisgarh'), (8, 'Dadra and Nagar Haveli and Daman and Diu'), (9, 'Delhi'), (10, 'Goa'), (11, 'Gujarat'), (12, 'Haryana'), (13, 'Himachal Pradesh'), (14, 'Jammu and Kashmir'), (15, 'Jharkhand'), (16, 'Karnataka'), (17, 'Kerala'), (18, 'Ladakh'), (19, 'Lakshadweep'), (20, 'Madhya Pradesh'), (21, 'Maharashtra'), (22, 'Manipur'), (23, 'Meghalaya'), (24, 'Mizoram'), (25, 'Nagaland'), (26, 'Odisha'), (27, 'Puducherry'), (28, 'Punjab'), (29, 'Rajasthan'), (30, 'Sikkim'), (31, 'Tamil Nadu'), (32, 'Telangana'), (33, 'Tripura'), (34, 'Uttarakhand'), (35, 'Uttar Pradesh'), (36, 'West Bengal')], default=0, null=True)),
                ('verify_email', models.BooleanField(blank=True, default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_name', models.CharField(max_length=254, null=True)),
                ('upload_date', models.DateField(null=True)),
                ('notice_year', models.CharField(max_length=5, null=True)),
                ('notice_pdf', models.FileField(null=True, upload_to='media')),
                ('notice_exam', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.noticeheading')),
            ],
        ),
        migrations.CreateModel(
            name='LatestNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('last_payment_date', models.DateField(null=True)),
                ('last_chalan_date', models.DateField(null=True)),
                ('last_bank_date', models.DateField(null=True)),
                ('job_notification', models.FileField(blank=True, null=True, upload_to='media')),
                ('payment_status', models.CharField(blank=True, max_length=254, null=True)),
                ('job_status', models.CharField(blank=True, max_length=254, null=True)),
                ('double_payment_status', models.CharField(blank=True, max_length=254, null=True)),
                ('job_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.job')),
            ],
        ),
        migrations.AddField(
            model_name='job',
            name='job_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.jobcategory'),
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('center1', models.IntegerField(choices=[(1, 'Mumbai'), (2, 'Delhi'), (3, 'Bangalore'), (4, 'Hyderabad'), (5, 'Ahmedabad'), (6, 'Chennai'), (7, 'Kolkata'), (8, 'Surat'), (9, 'Pune'), (10, 'Jaipur')], null=True)),
                ('center2', models.IntegerField(choices=[(1, 'Mumbai'), (2, 'Delhi'), (3, 'Bangalore'), (4, 'Hyderabad'), (5, 'Ahmedabad'), (6, 'Chennai'), (7, 'Kolkata'), (8, 'Surat'), (9, 'Pune'), (10, 'Jaipur')], null=True)),
                ('center3', models.IntegerField(choices=[(1, 'Mumbai'), (2, 'Delhi'), (3, 'Bangalore'), (4, 'Hyderabad'), (5, 'Ahmedabad'), (6, 'Chennai'), (7, 'Kolkata'), (8, 'Surat'), (9, 'Pune'), (10, 'Jaipur')], null=True)),
                ('test_meduim', models.CharField(max_length=10, null=True)),
                ('science_student', models.BooleanField(null=True)),
                ('ex_Serviceman', models.BooleanField(null=True)),
                ('discharge_ex_serviceman', models.DateField(null=True)),
                ('service_inyears', models.CharField(max_length=2, null=True)),
                ('join_civil', models.BooleanField(null=True)),
                ('date_join_civil', models.DateField(null=True)),
                ('suffering_cerebral_palsy', models.BooleanField(null=True)),
                ('provide_exam_help', models.BooleanField(null=True)),
                ('scribe_required', models.BooleanField(null=True)),
                ('arrangement_own_scribe', models.BooleanField(null=True)),
                ('arranged_by', models.BooleanField(null=True)),
                ('age_relaxation', models.BooleanField(null=True)),
                ('age_relaxation_code', models.CharField(max_length=254, null=True)),
                ('highest_qualification', models.IntegerField(choices=[(1, 'Matric/High School'), (2, 'Intermediate/Higher Secondary/12thStandard'), (3, 'Certificate'), (4, 'Diploma'), (5, 'BA'), (6, 'BA (Hons.)'), (7, 'B. Com.'), (8, 'B.Com. (Hons.)'), (9, 'B.Sc.'), (10, 'B.Sc. (Hons.)'), (11, 'B. Ed.'), (12, 'LLB'), (13, 'BE'), (14, 'B. Tech'), (15, 'AMIE (Part A & Part B)'), (16, 'B.Sc. (Engg.)'), (17, 'BCA'), (18, 'BBA'), (19, 'Graduation issued by Defence (Indian Army, Air Force, Navy)'), (20, 'B. Lib.'), (21, 'B. Pharm.'), (22, 'ICWA'), (23, 'CA'), (24, 'PG Diploma'), (25, 'MA'), (26, 'M.Com.'), (27, 'M. Sc.'), (28, 'M.Ed.'), (29, 'LLM'), (30, 'ME'), (31, 'M. Tech.'), (32, 'M. Sc. (Engg.)'), (33, 'MCA'), (34, 'MBA'), (35, 'Others')], null=True)),
                ('qualifying_educational_qualification', models.CharField(max_length=254, null=True)),
                ('education_status', models.CharField(max_length=20, null=True)),
                ('education_passing_year', models.IntegerField(choices=[(1, '2021'), (2, '2020'), (3, '2019'), (4, '2018'), (5, '2017'), (6, '2016'), (7, '2015'), (8, '2014'), (9, '2013'), (10, '2012'), (11, '2011'), (12, '2010'), (13, '2009'), (14, '2008'), (15, '2007'), (16, '2006'), (17, '2005'), (18, '2004'), (19, '2003'), (20, '2002'), (21, '2001'), (22, '2000'), (23, '1999'), (23, '1998'), (24, '1997'), (25, '1996'), (26, '1995'), (27, '1994'), (28, '1993'), (29, '1992'), (30, '1991'), (31, '1990'), (32, '1989'), (33, '1988'), (34, '1987'), (35, '1986'), (36, '1985'), (37, '1984'), (38, '1983'), (39, '1982'), (40, '1981'), (41, '1980'), (42, '1979'), (43, '1978'), (44, '1977'), (45, '1976'), (46, '1975'), (47, '1974'), (48, '1973'), (49, '1972'), (50, '1971'), (51, '1970'), (52, '1969'), (53, '1968'), (54, '1967'), (55, '1966'), (56, '1965'), (57, '1964'), (58, '1963'), (59, '1962'), (60, '1961')], null=True)),
                ('education_state', models.IntegerField(choices=[(1, 'Andhra Pradesh'), (2, 'Assam'), (3, 'Bihar'), (4, 'Chhattisgarh'), (5, 'Goa'), (6, 'Gujarat'), (7, 'Haryana'), (8, 'Himachal Pradesh'), (9, 'Jammu and Kashmir'), (10, 'Jharkhand'), (11, 'Karnataka'), (12, 'Kerala'), (13, 'Maharashtra'), (14, 'Madhya Pradesh'), (15, 'Manipur'), (16, 'Meghalaya'), (17, 'Mizoram'), (18, 'Nagaland'), (19, 'Odisha'), (20, 'Punjab'), (21, 'Rajasthan'), (22, 'Tamil Nadu'), (23, 'Tripura'), (24, 'Uttar Pradesh'), (25, 'Uttarakhand'), (26, 'West Bengal'), (27, 'All India Boards'), (28, 'OTHER INSTITUTES RECOGNISED FOR SECONDARY LEVEL')], null=True)),
                ('education_boards', models.CharField(max_length=254, null=True)),
                ('roll_num', models.CharField(max_length=20, null=True)),
                ('pertencage', models.CharField(max_length=5, null=True)),
                ('share_info', models.BooleanField(null=True)),
                ('photo', models.FileField(null=True, upload_to='media')),
                ('signature', models.FileField(null=True, upload_to='media')),
                ('date_of_photo', models.DateField(null=True)),
                ('date_mentioned_photo', models.BooleanField(null=True)),
                ('i_agree', models.BooleanField(null=True)),
                ('roll_number', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, default='Not Available', max_length=50, null=True)),
                ('job', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.job')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AdmitCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_center', models.CharField(max_length=254, null=True)),
                ('exam_venue', models.CharField(max_length=254, null=True)),
                ('exam_reporting_time', models.TimeField(null=True)),
                ('exam_date', models.DateField(null=True)),
                ('exam_duration', models.CharField(max_length=254, null=True)),
                ('exam_start_time', models.TimeField(null=True)),
                ('exam_end_time', models.TimeField(null=True)),
                ('exam_shift', models.CharField(max_length=254, null=True)),
                ('exam_gate_close', models.TimeField(null=True)),
                ('examination_controller', models.FileField(null=True, upload_to='signature')),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.application')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AdditionDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=200, null=True)),
                ('nationality', models.IntegerField(choices=[(1, 'AFGHANISTAN'), (2, 'ALBANIA'), (3, 'ALGERIA'), (4, 'AMERICAN SAMOA'), (5, 'ANDORRA'), (6, 'ANGOLA'), (7, 'ANGUILLA'), (8, 'ANTARCTICA'), (9, 'ANTIGUA AND BARBUDA'), (10, 'ARGENTINA'), (11, 'ARMENIA'), (12, 'ARUBA'), (13, 'AUSTRALIA'), (14, 'AUSTRIA'), (15, 'AZERBAIJAN'), (16, 'BAHAMAS'), (17, 'BAHRAIN'), (18, 'BANGLADESH'), (19, 'BARBADOS'), (20, 'BELARUS'), (21, 'BELGIUM'), (22, 'BELIZE'), (23, 'BENIN'), (24, 'BERMUDA'), (25, 'BHUTAN'), (26, 'BOLIVIA'), (27, 'BOSNIA AND HERZEGOVINA'), (28, 'BOTSWANA'), (29, 'BOUVET ISLAND'), (30, 'BRAZIL'), (31, 'BRITISH INDIAN OCEAN TERRITORY'), (32, 'BRUNEI DARUSSALAM'), (33, 'BULGARIA'), (34, 'BURKINA FASO'), (35, 'BURUNDI'), (36, 'CAMBODIA'), (37, 'CAMEROON'), (38, 'CANADA'), (39, 'CAPE VERDE'), (40, 'CAYMAN ISLANDS'), (41, 'CENTRAL AFRICAN REPUBLIC'), (42, 'CHAD'), (43, 'CHILE'), (44, 'CHINA'), (45, 'CHRISTMAS ISLAND'), (46, 'COCOS (KEELING) ISLANDS'), (47, 'COLOMBIA'), (48, 'COMOROS'), (49, 'CONGO'), (50, 'CONGO, THE DEMOCRATIC REPUBLIC OF'), (51, 'COOK ISLANDS'), (52, 'COSTA RICA'), (53, "CÃ”TE D'IVOIRE"), (54, 'CROATIA'), (55, 'CUBA'), (56, 'CYPRUS'), (57, 'CZECH REPUBLIC'), (58, 'DENMARK'), (59, 'DJIBOUTI'), (60, 'DOMINICA'), (61, 'DOMINICAN REPUBLIC'), (62, 'ECUADOR'), (63, 'EGYPT'), (64, 'EL SALVADOR'), (65, 'EQUATORIAL GUINEA'), (66, 'ERITREA'), (67, 'ESTONIA'), (68, 'ETHIOPIA'), (69, 'FALKLAND ISLANDS (MALVINAS)'), (70, 'FAROE ISLANDS'), (71, 'FIJI'), (72, 'FINLAND'), (73, 'FRANCE'), (74, 'FRENCH GUIANA'), (75, 'FRENCH POLYNESIA'), (76, 'FRENCH SOUTHERN TERRITORIES'), (77, 'GABON'), (78, 'GAMBIA'), (79, 'GEORGIA'), (80, 'GERMANY'), (81, 'GHANA'), (82, 'GIBRALTAR'), (83, 'GREECE'), (84, 'GREENLAND'), (85, 'GRENADA'), (86, 'GUADELOUPE'), (87, 'GUAM'), (88, 'GUATEMALA'), (89, 'GUINEA'), (90, 'GUINEA'), (91, 'GUYANA'), (92, 'HAITI'), (93, 'HEARD ISLAND AND MCDONALD ISLANDS'), (94, 'HONDURAS'), (95, 'HONG KONG'), (96, 'HUNGARY'), (97, 'ICELAND'), (98, 'INDIA'), (99, 'INDONESIA'), (100, 'IRAN, ISLAMIC REPUBLIC OF'), (101, 'IRAQ'), (102, 'IRELAND'), (103, 'ISRAEL'), (104, 'ITALY'), (105, 'JAMAICA'), (106, 'JAPAN'), (107, 'JORDAN'), (108, 'KAZAKHSTAN'), (109, 'KENYA'), (110, 'KIRIBATI'), (111, "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF"), (112, 'KOREA, REPUBLIC OF'), (113, 'KUWAIT'), (114, 'KYRGYZSTAN'), (115, "LAO PEOPLE'S DEMOCRATIC REPUBLIC"), (116, 'LATVIA'), (117, 'LEBANON'), (118, 'LESOTHO'), (119, 'LIBERIA'), (120, 'LIBYAN ARAB JAMAHIRIYA'), (121, 'LIECHTENSTEIN'), (122, 'LITHUANIA'), (123, 'LUXEMBOURG'), (124, 'MACAO'), (125, 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF'), (126, 'MADAGASCAR'), (127, 'MALAWI'), (128, 'MALAYSIA'), (129, 'MALDIVES'), (130, 'MALI'), (131, 'MALTA'), (132, 'MARSHALL ISLANDS'), (133, 'MARTINIQUE'), (134, 'MAURITANIA'), (135, 'MAURITIUS'), (136, 'MAYOTTE'), (137, 'MEXICO'), (138, 'MICRONESIA, FEDERATED STATES OF'), (139, 'MOLDOVA, REPUBLIC OF'), (140, 'MONACO'), (141, 'MONGOLIA'), (142, 'MONTSERRAT'), (143, 'MOROCCO'), (144, 'MOZAMBIQUE'), (145, 'MYANMAR'), (146, 'NAMIBIA'), (147, 'NAURU'), (148, 'NEPAL'), (149, 'NETHERLANDS'), (150, 'NETHERLANDS ANTILLES'), (151, 'NEW CALEDONIA'), (152, 'NEW ZEALAND'), (153, 'NICARAGUA'), (154, 'NIGER'), (155, 'NIGERIA'), (156, 'NIUE'), (157, 'NORFOLK ISLAND'), (158, 'NORTHERN MARIANA ISLANDS'), (159, 'NORWAY'), (160, 'OMAN'), (161, 'PAKISTAN'), (162, 'PALAU'), (163, 'PALESTINIAN TERRITORY, OCCUPIED'), (164, 'PANAMA'), (165, 'PAPUA NEW GUINEA'), (166, 'PARAGUAY'), (167, 'PERU'), (168, 'PHILIPPINES'), (169, 'PITCAIRN'), (170, 'POLAND'), (171, 'PORTUGAL'), (172, 'PUERTO RICO'), (173, 'QATAR'), (174, 'RÃ‰UNION'), (175, 'ROMANIA'), (176, 'RUSSIAN FEDERATION'), (178, 'RWANDA'), (179, 'SAINT HELENA'), (180, 'SAINT KITTS AND NEVIS'), (181, 'SAINT LUCIA'), (182, 'SAINT PIERRE AND MIQUELON'), (183, 'SAINT VINCENT AND THE GRENADINES'), (184, 'SAMOA'), (185, 'SAN MARINO'), (186, 'SAO TOME AND PRINCIPE'), (187, 'SAUDI ARABIA'), (188, 'SENEGAL'), (189, 'SERBIA AND MONTENEGRO'), (190, 'SEYCHELLES'), (191, 'SIERRA LEONE'), (192, 'SINGAPORE'), (193, 'SLOVAKIA'), (194, 'SLOVENIA'), (195, 'SOLOMON ISLANDS'), (196, 'SOMALIA'), (197, 'SOUTH AFRICA'), (198, 'SOUTH GEORGIA AND SOUTH SANDWICH ISLANDS'), (199, 'SPAIN'), (200, 'SRI LANKA'), (201, 'SUDAN'), (202, 'SURINAME'), (203, 'SVALBARD AND JAN MAYEN'), (204, 'SWAZILAND'), (205, 'SWEDEN'), (206, 'SWITZERLAND'), (207, 'SYRIAN ARAB REPUBLIC'), (208, 'TAIWAN, PROVINCE OF CHINA'), (209, 'TAJIKISTAN'), (210, 'TANZANIA, UNITED REPUBLIC OF'), (211, 'THAILAND'), (212, 'TIMOR'), (213, 'TOGO'), (214, 'TOKELAU'), (215, 'TONGA'), (216, 'TRINIDAD AND TOBAGO'), (217, 'TUNISIA'), (218, 'TURKEY'), (219, 'TURKMENISTAN'), (220, 'TURKS AND CAICOS ISLANDS'), (221, 'TUVALU'), (222, 'UGANDA'), (223, 'UKRAINE'), (224, 'UNITED ARAB EMIRATES'), (225, 'UNITED KINGDOM'), (226, 'UNITED STATES'), (227, 'UNITED STATES MINOR OUTLYING ISLANDS'), (228, 'URUGUAY'), (229, 'UZBEKISTAN'), (230, 'VANUATU'), (231, 'VIET NAM'), (232, 'VIRGIN ISLANDS, BRITISH'), (233, 'VIRGIN ISLANDS, U.S.'), (234, 'WALLIS AND FUTUNA'), (235, 'WESTERN SAHARA'), (236, 'YEMEN'), (237, 'ZIMBABWE')], default=0, null=True)),
                ('indent_mark', models.CharField(max_length=250, null=True)),
                ('is_disability', models.BooleanField(default=False, null=True)),
                ('type_disability', models.IntegerField(choices=[(1, 'Vision Impairment'), (2, 'Deaf or hard of hearing'), (3, 'Mental health conditions'), (4, 'Intellectual disability'), (5, 'Acquired brain injury'), (6, 'Autism spectrum disorder'), (7, 'Physical disability')], default=0, null=True)),
                ('certificate_disability_num', models.CharField(blank=True, max_length=200, null=True)),
                ('permanent_address', models.CharField(max_length=200, null=True)),
                ('state', models.IntegerField(choices=[(1, 'Andaman and Nicobar Islands'), (2, 'Andhra Pradesh'), (3, 'Arunachal Pradesh'), (4, 'Assam'), (5, 'Bihar'), (6, 'Chandigarh'), (7, 'Chhattisgarh'), (8, 'Dadra and Nagar Haveli and Daman and Diu'), (9, 'Delhi'), (10, 'Goa'), (11, 'Gujarat'), (12, 'Haryana'), (13, 'Himachal Pradesh'), (14, 'Jammu and Kashmir'), (15, 'Jharkhand'), (16, 'Karnataka'), (17, 'Kerala'), (18, 'Ladakh'), (19, 'Lakshadweep'), (20, 'Madhya Pradesh'), (21, 'Maharashtra'), (22, 'Manipur'), (23, 'Meghalaya'), (24, 'Mizoram'), (25, 'Nagaland'), (26, 'Odisha'), (27, 'Puducherry'), (28, 'Punjab'), (29, 'Rajasthan'), (30, 'Sikkim'), (31, 'Tamil Nadu'), (32, 'Telangana'), (33, 'Tripura'), (34, 'Uttarakhand'), (35, 'Uttar Pradesh'), (36, 'West Bengal')], null=True)),
                ('district', models.CharField(max_length=254, null=True)),
                ('pin_code', models.CharField(max_length=200, null=True)),
                ('is_address_same', models.BooleanField(default=False, null=True)),
                ('agreement', models.BooleanField(default=False, null=True)),
                ('other_contact', models.CharField(max_length=200, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
